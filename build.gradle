plugins {
  id "java-gradle-plugin"
  id 'signing'
  id 'com.gradle.plugin-publish' version '1.3.1'
}

group = "com.carrotsearch.gradle.build-infra"
version = buildInfraLibs.versions.projectVersion.get()

repositories {
  mavenCentral()
  gradlePluginPortal()
}

tasks.withType(Javadoc).configureEach {
  it.options.addBooleanOption("Xdoclint:none", true)
}

gradlePlugin {
  website = 'https://github.com/carrotsearch/gradle-build-infra'
  vcsUrl = 'https://github.com/carrotsearch/gradle-build-infra.git'

  plugins {
    BuildInfraPlugin {
      id = 'com.carrotsearch.gradle.buildinfra'
      implementationClass = 'buildinfra.BuildInfraPlugin'
      displayName = "Reusable, opinionated gradle build infrastructure"
      description = "Reusable, opinionated gradle build infrastructure"
      tags.set(['convention', 'built-utility', 'testing', 'randomizedtesting'])
    }
  }
}

dependencies {
  implementation(buildInfraLibs.spotless.plugin) {
    exclude module: "groovy-xml"
  }
  implementation(buildInfraLibs.forbiddenapis.plugin)
  implementation(buildInfraLibs.benmanes.versions.plugin)
  implementation(buildInfraLibs.version.catalog.update.plugin)
  implementation(buildInfraLibs.jackson.databind)
  implementation(buildInfraLibs.carrotsearch.procfork)
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(buildInfraLibs.versions.minJava.get())
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}
