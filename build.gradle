plugins {
  id "java-gradle-plugin"
  id "groovy"
  id 'signing'
  id 'maven-publish'
  alias(libs.plugins.pluginpublish)
  alias(libs.plugins.buildinfra)
}

repositories {
  mavenCentral()
  gradlePluginPortal()
}

project.group = "com.carrotsearch.gradle.buildinfra"
project.version = libs.versions.projectVersion.get()

project.description = "Reusable, opinionated gradle build infrastructure"
project.ext.websiteAddress = "https://github.com/carrotsearch/gradle-build-infra"
project.ext.vcsAddress = "git@github.com:carrotsearch/gradle-build-infra.git"

dependencies {
  api(libs.spotless.plugin) {
    exclude module: "groovy-xml"
  }
  api(libs.forbiddenapis.plugin)
  api(libs.benmanes.versions.plugin)
  api(libs.version.catalog.update.plugin)
  api(libs.buildoptions.plugin)

  implementation(libs.jackson.databind)
  implementation(libs.carrotsearch.procfork)

  testImplementation libs.junit.jupiter
  testRuntimeOnly("org.junit.platform:junit-platform-launcher")

  testImplementation libs.assertj

  testImplementation platform(libs.spockframework.get())
  testImplementation "org.spockframework:spock-core"
}

gradlePlugin {
  website = project.ext.websiteAddress
  vcsUrl = project.ext.websiteAddress + ".git"

  plugins {
    BuildInfraPlugin {
      id = 'com.carrotsearch.gradle.buildinfra'
      implementationClass = 'com.carrotsearch.gradle.buildinfra.BuildInfraPlugin'
      displayName = project.description
      description = project.description
      tags.set([
        'convention',
        'build-utility',
        'testing',
        'randomizedtesting'
      ])
    }
  }
}

tasks.withType(Javadoc).configureEach {
  it.options.addBooleanOption("Xdoclint:none", true)
}

tasks.register("sourcesJar", Jar, {
  dependsOn classes
  archiveClassifier = 'sources'
  from sourceSets.main.allJava
})

tasks.register("javadocJar", Jar, {
  dependsOn javadoc
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
})

tasks.withType(Test).configureEach {
  useJUnitPlatform()
  systemProperty("tests.gradle.version", gradle.gradleVersion)
}

tasks.matching { it.name == "publishAllPublicationsToSonatypeRepository" }.configureEach {
  doFirst {
    if (gradle.startParameter.maxWorkerCount != 1) {
      throw new GradleException("Use '--max-workers 1' to prevent multiple uploads.")
    }
  }
}

tasks.register("publishToSonatype", {
  description = "Publish plugin to Sonatype"
  group = "Publishing"
  dependsOn "publishAllPublicationsToSonatypeRepository"
})

publishing {
  repositories {
    maven {
      name = 'build'
      url = project.layout.buildDirectory.dir("maven").get().asFile
    }

    maven {
      name = 'sonatype'
      url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"

      credentials {
        if (project.hasProperty('nexusUsername')) {
          username = project.nexusUsername
        }
        if (project.hasProperty('nexusPassword')) {
          password = project.nexusPassword
        }
      }
    }
  }

  publications {
    withType(MavenPublication).configureEach {
      pom {
        inceptionYear = "2025"

        name = project.name
        description = project.description
        url = websiteAddress

        licenses {
          license {
            name = 'Apache 2'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        organization {
          name = "Carrot Search s.c."
          url = "https://www.carrotsearch.com"
        }

        developers {
          developer {
            id = 'dawid.weiss'
            name = 'Dawid Weiss'
            email = 'dawid.weiss@carrotsearch.com'
          }
        }

        scm {
          connection = 'scm:git:' + project.ext.vcsAddress
          developerConnection = project.ext.vcsAddress
          url = websiteAddress
        }
      }
    }
  }
}